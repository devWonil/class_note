Spring boot MVC 패턴과 View Templates

MVC (Model-View-Controller) 패턴은 역할 분담 패턴이다.

모델(Model)은 데이터를 담당, 뷰(View) 화면 담당, 컨트롤러(Controller)는 모델과 뷰 사이에 중재자 역할을 한다.

MVC패턴을 통해서 각각의 모듈이 명확해진다.

이로 인해서 코드의 유지보수가 쉬워지고, 개발자-디자이너 간 협업이 원활해진다.


모듈이란?

프로그램 작고 단순한 것에서 크고 복잡한 것으로 진화한다. 그 과정에서 코드의 재활용성을 높이고, 유지보수를 쉽게 할 수 있는 다양한 기법들이 사용된다. 그 중 하나가 여러개의 파일로 분리하는 것이다.

스프링 JPA란?

1. JPA는 Java Persistence API이다.

2. JPA는 ORM 기술이다.

3. JPA는 반복적인 CRUD 작업을 생략하게 해준다.

4. JPA는 영속성 컨텍스트를 가지고 있다.

5. JPA는 DB와 OOP의 불일치성을 해결하기 위한 방법론을 제공한다. (DB는 객체 저장불가)

6. JPA는 OOP관점에서 모델링을 할 수 있게 해준다(상속, 컴포지션, 연관관계)

7. 방언처리가 용이하여 Migration 하기 좋음. 유지보수에도 좋음


1. JPA - Java Persistence API

: 자바에 있는 데이터를 영구히 저장할 수 있는 즉, DMBS에 저장할 수 있는 환경을 제공하는 API이다.

 자바 프로그램을 할 때 데이터를 영구적으로 저장하기 위한 interface가 JPA이다.

Persistence

영속성은 데이터를 생성한 프로그램의 실행이 종료되더라도 사라지지 않는 데이터의 특성을 의미한다.

영속성은 파일 시스템, 관계형 데이터 베이스 등을 활용해서 구현한다. 영속성을 갖지 않는 데이터는 단지 메모리

에서만 존재하기 때문에 프로그램을 종료하면 모두 잃어버리게 된다.


API - Application Programming Interface


2. JPA는 ORM 기술이다.

ORM - Object Relational Mapping, 객체-관계매핑 (자바 클래스 먼저 정의한다) <-> TRM

객체와 관계형 데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다.

객체 지향 프로그램은 클래스를 사용하고, 관계형 데이터베이스는 테이블 사용한다.

객체 모델과 관계형 모델 간의 타입 불일치가 존재한다.

ORM을 통해서 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.


모델링이란?

추상적인 개념을 현실세계에 뽑아내는 것


3. JPA는 반복적인 CRUD 작업을 생략하게 해준다.

select

selectAll

delete

update

insert

단순한 반복적인 작업들을 JPA 단 하나의 함수라 몇 몇 기법들 활용하면 다 처리해준다.


4. JPA는 영속성 컨텍스트를 가지고 있다. (Context)

5. JPA는 DB와 OOP의 불일치성을 해결하기 위한 방법론을 제공한다. (DB는 객체 저장불가)

6. JPA는 OOP관점에서 모델링을 할 수 있게 해준다(상속, 컴포지션, 연관관계)

7. 방언처리가 용이하여 Migration 하기 좋음. 유지보수에도 좋음

추상화 처리되어 있어서 실제 구현한 코드를 바꿔넣으면 됨


spring boot 동작 원리

내장 톰캣을 가진다.

톰캣을 따로 설치할 필요없이 바로 실행가능하다.



서블릿이란?

클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술

(자바를 이용해서 동적인 웹 페이지를 만들기 위한 기술)


서블릿 컨테이너란?

웹 서버에서 서블릿을 만들었다고 해서 스스로 동작하는 것은 아니고, 서블릿을 관리해주는 다양한 역할이 필요

하고 그 역할을 하는 것이다. (ex Tomcat, WebLogic, Jeus, JBoss) 

대표적인 웹서버 (ex Apache, Nginx, IIS)


WAS의 내부구조

1. 웹서버로부터 요청이 들어오면 제일먼저 컨테이너가 이를 처리한다.

2. 컨테이너는 배포서술자(web.xml) 참조하여 해당 서블릿에 대한 스레드를 생성하고 요청(httpServletRequest) 
및 응답을 생성(httpServletResponse)하여 전달한다.

3. 다음으로는 컨테이너는 서블릿을 호출한다.

4. 호출된 특정 메소드는 doPost(), doGet() 동적 페이지를 생성해서 Response 객체에 실어 컨테이너에 전달한다.

5. 컨테이너는 전달받은 Response 객체를 HttpResponse 형태로 전환해서 웹서버에 전달하고 생성되었던 스레드
를 종료하고 httpServletRequest, httpServletResponse 객체를 소멸시킨다.


1. 브라우저에서 요청을 보내면 디스패처서블릿에서 첫번째 요청을 받습니다.

2. 디스패처서블릿은 핸들러매핑의 도움을 받아 주어진 요청과 관련된 컨트롤러 클래스 이름을 알게된다.

3. 따라서 컨트롤러에 요청 전송을 요청하면 컨트롤러는 적절한 메소드를 실행해서 요청을 처리하고 ModelAndView

또는 직접 뷰 파일을 디스패처서블릿으로 반환한다.

4. 디스패처서블릿은 모델 객체를 뷰리졸브로 보내 실제 페이지를 가져옵니다.

5. 마지막으로 디스패처서블릿의 모델 객체를 전달합니다. 페이지를 완성해서 결과를 웹서버에 반환을 하고 웹서버

는 그것을 응답한다.


web.xml ?

서버 설정관련

이 파일은 Tomcat과 같은 WAS(Web Application Server)가 최초로 구동될 때, 각종 설정을 정의해주는 파일이다.


root-content.xml

이 파일은 MVC Model 과 관련된 객체를 정의한다.

데이터와 관련된 Service, DAO, Database 등의 설정이 이 파일에 포함된다.


application-context.xml

url과 관련된 Controller, @(어노테이션), ViewResolver 등 설정을 이 파일에서 하게된다. 


web.xml + root-content.xml + application-context.xml == application.properties (= application.yml)


application.yml

 ▶ ServletContext 초기 파라미터

 ▶ Session의 유효시간을 설정

 ▶ Servlet/JSP 매핑

 ▶ MIME TYPE 매핑

 ▶ Database 설정

 ▶ welcome File list

 ▶ Error Pages 처리

 ▶ 리스너/필터 설정

 ▶ 보안


FrontController 패턴

최초 앞단에 request 요청을 받아서 필요한 클래스에 넘겨준다.


RequestDispatcher

request와 response를 그대로 유지 시켜준다.


DispatcherServlet

FrontController 패턴 + RequestDispatcher 이다.

1. DispatcherServlet이 브라우저로부터 요청을 받는다.

2. DispatcherServlet은 요청된 URL을 HandlerMapping 객체에 넘기고, 호출해야 할 Controller 메소드(핸들러) 정보를 얻는다.

3. DispatcherServlet이 HandlerAdapter 객체를 가져온다. 

4. HandlerAdapter 객체의 메소드를 실행한다. 

※ 보다 정확하게 표현한다면, HandlerMapping은 DispatcherServlet로부터 전달된 URL을 바탕으로 HandlerAdapter 객체를 포함하는 HandlerExecutionChain 객체를 생성하며, 이후 DispatcherServlet이 HandlerExecutionChain 객체로부터 HandlerAdapter 객체를 가져와서 해당 메소드를 실행하게 된다.

5. Controller 객체는 비즈니스 로직을 처리하고, 그 결과를 바탕으로 뷰(ex. JSP)에 전달할 객체를 Model 객체에 저장한다. DispatcherServlet에게 view name을 리턴한다.

6. DispatcherServlet은 view name을 View Resolver에게 전달하여 View 객체를 얻는다.

7. DispatcherServlet은 View 객체에 화면 표시를 의뢰한다.

8. View 객체는 해당하는 뷰(ex. JSP, Mustache, Thymeleaf)를 호출하며, 뷰는 Model 객체에서 화면 표시에 필요한 객체를 가져와 화면 표시를 처리한다.




ApplicationContext (스프링 컨테이너)

디스패처서블릿에 의해 생성되어지는 수 많은 객체들은 ApplicationContext 에서 관리된다. 이것을 IoC라고 한다.


IoC란 제어의 역전을 의미한다. 개발자가 직접 new를 통해 객체를 생성하게 되면 객체를 가르키는 레퍼런스 변수를

관리하기 어려워진다. 그래서 스프링이 직접 해당 객체를 관리한다. (필요할 때 DI + 싱글톤패턴으로 관리된다)


DI (Dependency Injection) 의존성 주입이라고 한다. 필요한 곳에 ApplicationContext에 접근해서 필요한 객체를 가

져올 수 있다.


ApplicationContext의 종류에는 두가지가 있다 (root-applicationContext와 servlet-applicationContext)

servlet-applicationContext 에서는 root-applicationContext가 로드한 객체를 참조할 수 있지만 그 반대는 불가능함



1강 스프링부트 환경설정

JDK 설치가 되어 있어야한다.

환경변수 셋팅하기

MySQL 설치하기

root계정 및 비번 확인

sts tool 설치 (version : 4.14.0) -> 4.13.0 버전 라이브러리 다운로드 진행안됨 (75%에서 멈춤)

단축키 설정

젯 브레인(러시아) : 인텔리제이(자바, 스프링, 앱 ...)와 같은 단축키로 sts툴을 변경 --> 코틀린 (앱, 스프링)


웹 개발 환경세팅 (lombok 설정, JSP 설치, javascript 파일 설정 (File Associations --> *.js, *.jsp)



2. 프로젝트 생성 및 의존 설정

SpringBoot DevTools (자동 재실행)

Lombok (get, set, builder)

MYSqL Driver

Spring Security(보안기능 lib)

템플릿 엔진 (JSP 사용)

Spring Web (어노테이션을 사용하기 위해 체크)

 WEB MVC 를 사용하기 위해








3. 스프링부트 - MySQL 세팅

my.ini 파일 (설정)

MySQL 재시작

db 계정 생성





4강 springboot JAP - MIME TYPE

body에는 실제 데이터

통신을 할 때 (네트워크) 통신 방식이 있는데 서킷 스위칭 방식, 패킷 스위칭 방식이 있다.

http 통신할 때 우리가 사용하는 통신 방식은 패킷 스위칭 방식이다.


Packet Switching

패킷스위칭은 데이터를 패킷이라는 단위로 쪼개서 전송하는 방식이다.

패킷은 다음 링크로 전송하기 전에 저장을 한뒤 전달하는 store forward 방식을 따른다.

패킷의 헤더에는 출발지와 목적지 정보가 있다.

라우팅 알고리즘을 이용하여 경로를 설정하고, 중간의 라우터들을 거쳐 최종 목적지에 도달하게 된다.


Circuit Switching

서킷스위칭은 하나의 회선을 할당받아 데이터를 주고 받는 방식이다.

먼저 통신을 위한 연결을 해야하며 연결이 되고나면 출발지로부터 목적지까지 도착하는데 사용되는 회선 전체를

독점하기 때문에 다른 사람이 끼어들 수 없다. 서킷스위칭은 전화와 같은 실시간 통신에 사용된다. 따라서 속도와

성능이 일정하다.


정리

http 통신은 패킷 스위칭 방식으로 데이터를 전달하며 헤더에 출발지와 목적지, MIME TYPE 등을 가지고

(type/subtype) 구조로 데이터의 종류에 대한 정보를 정해진 형식에 따라서 헤더에 기술하는 것이다.